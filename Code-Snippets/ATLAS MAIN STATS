-- input your Atlas node Address here:
set nodeaddress to "0x0000000000000000000000000000000000000000" 




-- set payt to 1 to show available payout, set it to 0 to hide available payout: 
set payt to 1

-- get info around particular Atlas node
set link to "https://explorer-api.ambrosus.io/atlases/" & nodeaddress
set mJson to do shell script "curl -s " & link
set AppleScript's text item delimiters to {nodeaddress}
set keyNodeList to (every text item in mJson) as list
set AppleScript's text item delimiters to ""

set listSize to count of keyNodeList
if listSize is not equal to 2 then
	set status to "ONLINE"
	set nodefound to "yes"
else
	set status to "OFFLINE"
	set nodefound to "no"
end if

-- get allbundles
set firstSet to item 2 of keyNodeList
set AppleScript's text item delimiters to {","}
set keyValueList to (every text item in firstSet) as list
set AppleScript's text item delimiters to ""

set theKeyValuePair to item 14 of keyValueList
set AppleScript's text item delimiters to {": "}
set theKeyValueBufferList to (every text item in theKeyValuePair) as list
set AppleScript's text item delimiters to ""
set allbundles to item 2 of theKeyValueBufferList

-- get stake
set theKeyValuePair to item 7 of keyValueList
set AppleScript's text item delimiters to {": "}
set theKeyValueBufferList to (every text item in theKeyValuePair) as list
set AppleScript's text item delimiters to ""
set stake to item 2 of theKeyValueBufferList

-- get balance
set firstSet to item 3 of keyNodeList
set AppleScript's text item delimiters to {","}
set keyValueList to (every text item in firstSet) as list
set AppleScript's text item delimiters to ""

set theKeyValuePair to item 3 of keyValueList
set AppleScript's text item delimiters to {": "}
set theKeyValueBufferList to (every text item in theKeyValuePair) as list
set AppleScript's text item delimiters to ""
set balance to item 2 of theKeyValueBufferList

-- get payout
set firstSet to item 2 of keyNodeList
set AppleScript's text item delimiters to {","}
set keyValueList to (every text item in firstSet) as list
set AppleScript's text item delimiters to ""
set theKeyValuePair to item 19 of keyValueList
set AppleScript's text item delimiters to {": "}
set theKeyValueBufferList to (every text item in theKeyValuePair) as list
set AppleScript's text item delimiters to ""
set payout to item 2 of theKeyValueBufferList

set payout to RoundImperialNumberToTwoDecimals(payout)

set allbundles to RemoveFromString("\"", allbundles)

set balance to RemoveFromString("\"", balance)

set stake to returnNumbersInString(stake)

set balance to RoundImperialNumberToTwoDecimals(balance)

if payt is not equal to 0 then set unformatedValue to "| " & balance & " AMB | " & payout & " AMB inPayout | " & allbundles & " Bundles | " & stake & " Stake |"
if payt is equal to 0 then set unformatedValue to "| " & balance & " AMB | " & allbundles & " Bundles | " & stake & " Stake |"


return RemoveFromString("\"", unformatedValue)


------- functions below -----------------------

-- remove character or string from given string
on RemoveFromString(CharOrString, txt)
	set AppleScript's text item delimiters to CharOrString
	set temp to txt's text items
	set AppleScript's text item delimiters to ""
	return temp as text
end RemoveFromString

-- round balance to two decimals
on RoundImperialNumberToTwoDecimals(txt)
	set AppleScript's text item delimiters to "."
	set decimals to text item 2 of txt
	if (count decimals) < 2 then
		set decimals to decimals & "0"
	end if
	set decimals to (text 1 thru 2 of decimals)
	set theNumber to text item 1 of txt & "." & decimals
	set AppleScript's text item delimiters to ""
	return theNumber
end RoundImperialNumberToTwoDecimals

-- convert string to numbers
on returnNumbersInString(inputString)
	set s to quoted form of inputString
	do shell script "sed s/[a-zA-Z\\']//g <<< " & s
	set dx to the result
	set numlist to {}
	repeat with i from 1 to count of words in dx
		set this_item to word i of dx
		try
			set this_item to this_item as number
			set the end of numlist to this_item
		end try
	end repeat
	return numlist
end returnNumbersInString
