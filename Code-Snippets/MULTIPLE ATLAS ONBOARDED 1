-- input your Atlas node Address here:
set nodeaddress to "0x0000000000000000000000000000000000000000"


-- get info around particular Atlas node
set mJson to do shell script "curl -s 'https://explorer-api.ambrosus.com/atlases'"
set AppleScript's text item delimiters to {nodeaddress}
set keyNodeList to (every text item in mJson) as list
set AppleScript's text item delimiters to ""

set nodefound to "yes"

set listSize to count of keyNodeList
set page to 1
-- iterate through pages of 50 nodes to find the right one
repeat while listSize = 1
	set AppleScript's text item delimiters to {"\"next\":"}
	set keyNodeList to (every text item in mJson) as list
	set AppleScript's text item delimiters to ""
	if (count of keyNodeList) is 1 then set nodefound to "no"
	if (count of keyNodeList) is 1 then exit repeat
	set pageEnd to item 2 of keyNodeList
	
	set AppleScript's text item delimiters to {","}
	set nextPageIdList to (every text item in pageEnd) as list
	set AppleScript's text item delimiters to ""
	set nextpageid to item 1 of nextPageIdList
	
	set nextpageid to RemoveFromString("\"", nextpageid)
	set nextpageid to RemoveFromString(" ", nextpageid)
	set newlink to "https://explorer-api.ambrosus.com/atlases?next=" & nextpageid
	set page to page + 1
	set mJson to do shell script "curl -s " & newlink
	set AppleScript's text item delimiters to {nodeaddress}
	set keyNodeList to (every text item in mJson) as list
	set AppleScript's text item delimiters to ""
	
	set listSize to count of keyNodeList
	--display dialog ((count of keyNodeList) as string)
	if listSize is not equal to 1 then exit repeat
end repeat


if nodefound is equal to "yes" then
	-- get state
	set firstSet to item 2 of keyNodeList
	set AppleScript's text item delimiters to {"state"}
	set keyValueList to (every text item in firstSet) as list
	set AppleScript's text item delimiters to ""
	
	set firstSet to item 2 of keyValueList
	set AppleScript's text item delimiters to {","}
	set keyValueList to (every text item in firstSet) as list
	set AppleScript's text item delimiters to ""
	
	set theKeyValuePair to item 1 of keyValueList
	set AppleScript's text item delimiters to {": "}
	set theKeyValueBufferList to (every text item in theKeyValuePair) as list
	set AppleScript's text item delimiters to ""
	set state to item 2 of theKeyValueBufferList
	set state to RemoveFromString("\"", state)
end if
if nodefound is equal to "no" then set state to "OFFLINE"

if state is not equal to "ONBOARDED" then set state to "OFFLINE"

if state is equal to "ONBOARDED" then set stat to "➊"
if state is not equal to "ONBOARDED" then set stat to "➀"

set unformatedValue to stat
return RemoveFromString("\"", unformatedValue)


------- functions below -----------------------

-- remove character or string from given string
on RemoveFromString(CharOrString, txt)
	set AppleScript's text item delimiters to CharOrString
	set temp to txt's text items
	set AppleScript's text item delimiters to ""
	return temp as text
end RemoveFromString
