--input your node Addresses, leave unused slots like they are and turn unused off by setting to 0 below address input in the nodeactive variables. 

-- input your Apollo node Address here:
set nodeaddress1 to "0x0000000000000000000000000000000000000000"

-- input your Apollo node Address here:
set nodeaddress2 to "0x0000000000000000000000000000000000000000"

-- input your Apollo node Address here:
set nodeaddress3 to "0x0000000000000000000000000000000000000000"

-- input your Apollo node Address here:
set nodeaddress4 to "0x0000000000000000000000000000000000000000"

-- input your Apollo node Address here:
set nodeaddress5 to "0x0000000000000000000000000000000000000000"

-- input your Apollo node Address here:
set nodeaddress6 to "0x0000000000000000000000000000000000000000"

-- set nodes to process information from !:

set nodeactive1 to 0
set nodeactive2 to 0
set nodeactive3 to 0
set nodeactive4 to 0
set nodeactive5 to 0
set nodeactive6 to 0

-----------------------------------------

set nodes to {nodeaddress1, nodeaddress2, nodeaddress3, nodeaddress4, nodeaddress5, nodeaddress6}

set nodeactive to nodeactive1 + nodeactive2 + nodeactive3 + nodeactive4 + nodeactive5 + nodeactive6
set nodeactivearr to {nodeactive1, nodeactive2, nodeactive3, nodeactive4, nodeactive5, nodeactive6}

set stake to {"0", "0", "0", "0", "0", "0"}
set balance to {"0", "0", "0", "0", "0", "0"}

repeat with n from 1 to nodeactive
	
	if item n of nodeactivearr is equal to 1 then
		-- get info around particular Apollo node
		set link to "https://explorer-api.ambrosus.io/apollos/" & item n of nodes
		set mJson to do shell script "curl -s " & link
		set AppleScript's text item delimiters to {item n of nodes}
		set keyNodeList to (every text item in mJson) as list
		set AppleScript's text item delimiters to ""
		
		set listSize to count of keyNodeList
		if listSize is not equal to 2 then set status to "ONLINE"
		if listSize is equal to 2 then set status to "OFFLINE"
		
		if status is equal to "ONLINE" then
			-- get stake
			set firstSet to item 2 of keyNodeList
			set AppleScript's text item delimiters to {"stake"}
			set keyValueList to (every text item in firstSet) as list
			set AppleScript's text item delimiters to ""
			
			set firstSet to item 2 of keyValueList
			set AppleScript's text item delimiters to {","}
			set keyValueList to (every text item in firstSet) as list
			set AppleScript's text item delimiters to ""
			
			set theKeyValuePair to item 2 of keyValueList
			set AppleScript's text item delimiters to {": "}
			set theKeyValueBufferList to (every text item in theKeyValuePair) as list
			set AppleScript's text item delimiters to ""
			set item n of stake to item 2 of theKeyValueBufferList
			
			-- get balance
			set firstSet to item 3 of keyNodeList
			set AppleScript's text item delimiters to {","}
			set keyValueList to (every text item in firstSet) as list
			set AppleScript's text item delimiters to ""
			
			set theKeyValuePair to item 3 of keyValueList
			set AppleScript's text item delimiters to {": "}
			set theKeyValueBufferList to (every text item in theKeyValuePair) as list
			set AppleScript's text item delimiters to ""
			set item n of balance to item 2 of theKeyValueBufferList
		end if
		
		if status is not equal to "ONLINE" then
			-- get stake
			set firstSet to item 2 of keyNodeList
			set AppleScript's text item delimiters to {"stake"}
			set keyValueList to (every text item in firstSet) as list
			set AppleScript's text item delimiters to ""
			
			set firstSet to item 2 of keyValueList
			set AppleScript's text item delimiters to {","}
			set keyValueList to (every text item in firstSet) as list
			set AppleScript's text item delimiters to ""
			
			set theKeyValuePair to item 2 of keyValueList
			set AppleScript's text item delimiters to {": "}
			set theKeyValueBufferList to (every text item in theKeyValuePair) as list
			set AppleScript's text item delimiters to ""
			set item n of stake to item 2 of theKeyValueBufferList
			
			-- get balance
			set firstSet to item 3 of keyNodeList
			set AppleScript's text item delimiters to {","}
			set keyValueList to (every text item in firstSet) as list
			set AppleScript's text item delimiters to ""
			
			set theKeyValuePair to item 3 of keyValueList
			set AppleScript's text item delimiters to {": "}
			set theKeyValueBufferList to (every text item in theKeyValuePair) as list
			set AppleScript's text item delimiters to ""
			set item n of balance to item 2 of theKeyValueBufferList
		end if
		
		set item n of stake to RemoveFromString("\"", item n of stake)
		set item n of stake to returnNumbersInString(item n of stake)
		set item n of balance to RemoveFromString("\"", item n of balance)
		set item n of balance to RemoveFromString("}", item n of balance)
		set item n of balance to changetocomma(item n of balance)
		
	end if
end repeat
----------------


set stakeall to (item 1 of stake) + (item 2 of stake) + (item 3 of stake) + (item 4 of stake) + (item 5 of stake) + (item 6 of stake)

set balanceall to (item 1 of balance) + (item 2 of balance) + (item 3 of balance) + (item 4 of balance) + (item 5 of balance) + (item 6 of balance)
set balanceall to number_to_string(balanceall)
set balanceall to RoundImperialNumberToTwoDecimals(balanceall)

set unformatedValue to "| " & balanceall & " AMB | " & stakeall & " Stake |"

return RemoveFromString("\"", unformatedValue)


------- functions below -----------------------

-- remove character or string from given string
on RemoveFromString(CharOrString, txt)
	set AppleScript's text item delimiters to CharOrString
	set temp to txt's text items
	set AppleScript's text item delimiters to ""
	return temp as text
end RemoveFromString

-- change to comma
on changetocomma(txt)
	set AppleScript's text item delimiters to "."
	set commaseperation to (every text item in txt) as list
	set AppleScript's text item delimiters to ""
	set theNumber to text item 1 of commaseperation & "," & text item 2 of commaseperation
	return theNumber
end changetocomma

-- round balance to two decimals
on RoundImperialNumberToTwoDecimals(txt)
	set AppleScript's text item delimiters to ","
	if (count of text item of txt) is 2 then
		set decimals to text item 2 of txt
		if (count decimals) < 2 then
			set decimals to decimals & "0"
		end if
		set decimals to (text 1 thru 2 of decimals)
		set theNumber to text item 1 of txt & "," & decimals
		set AppleScript's text item delimiters to ""
		return theNumber
	end if
	if (count of text item of txt) is 1 then
		return txt
	end if
end RoundImperialNumberToTwoDecimals

-- convert string to numbers
on returnNumbersInString(inputString)
	set s to quoted form of inputString
	do shell script "sed s/[a-zA-Z\\']//g <<< " & s
	set dx to the result
	set numlist to {}
	repeat with i from 1 to count of words in dx
		set this_item to word i of dx
		try
			set this_item to this_item as number
			set the end of numlist to this_item
		end try
	end repeat
	return numlist
end returnNumbersInString

on number_to_string(this_number)
	set this_number to this_number as string
	if this_number contains "E+" then
		set x to the offset of "," in this_number
		set y to the offset of "+" in this_number
		set z to the offset of "E" in this_number
		set the decimal_adjust to characters (y - (length of this_number)) thru ¬
			-1 of this_number as string as number
		if x is not 0 then
			set the first_part to characters 1 thru (x - 1) of this_number as string
		else
			set the first_part to ""
		end if
		set the second_part to characters (x + 1) thru (z - 1) of this_number as string
		set the converted_number to the first_part
		repeat with i from 1 to the decimal_adjust
			try
				set the converted_number to ¬
					the converted_number & character i of the second_part
			on error
				set the converted_number to the converted_number & "0"
			end try
		end repeat
		return the converted_number
	else
		return this_number
	end if
end number_to_string

